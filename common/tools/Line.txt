function Line(v1, v2){
	var vertex1Set = false;
	var vertex2Set = false;
	this.vertex1 = v1 || {};
	this.vertex2 = v2 || {};

	if (v1) this.vertex1Set = true;
	if (v2) this.vertex2Set = true;
	
	this.finished = false;
	this.hover = false;
	this.dim = false;

	this.show = function(){	
		if (this.vertex1Set && this.vertex2Set) {
			if (this.vertex1.selected && this.vertex2.selected){
				ctx.beginPath();
				ctx.moveTo(this.vertex1.x, this.vertex1.y);
				ctx.lineTo(this.vertex2.x, this.vertex2.y);
				ctx.lineWidth = 5;
				ctx.strokeStyle = '#2BD1FF';
				ctx.globalAlpha = 0.5;
				ctx.stroke();
				ctx.globalAlpha = 1;
			} else if (this.hover) {
				ctx.beginPath();
				ctx.moveTo(this.vertex1.x, this.vertex1.y);
				ctx.lineTo(this.vertex2.x, this.vertex2.y);
				ctx.lineWidth = 8;
				ctx.strokeStyle = '#2BD1FF';
				ctx.globalAlpha = 0.25;
				ctx.stroke();
				ctx.globalAlpha = 1;
			}

			ctx.beginPath();
			ctx.moveTo(this.vertex1.x, this.vertex1.y);
			ctx.lineTo(this.vertex2.x, this.vertex2.y);
			ctx.lineWidth = 1;
			ctx.strokeStyle = '#000000';
			ctx.stroke();
		} else if(this.vertex1Set && !this.vertex2Set){
			this.vertex2.set(getMousePos().x, getMousePos().y);
			ctx.beginPath();
			ctx.moveTo(this.vertex1.x, this.vertex1.y);
			ctx.lineTo(this.vertex2.x, this.vertex2.y);
			ctx.lineWidth = 1;
			ctx.strokeStyle = '#000000';
			ctx.stroke();

			this.vertex2.show();
		}
	}

	this.isNear = function(x,y,dist){
		//TODO: Calculate if it is near the line
	
		var a = this.vertex1;
		var b = this.vertex2;
		var c = {x:x, y:y};
		var tolerance = 5;

		//test if the point c is inside a pre-defined distance (tolerance) from the line
    		var distance = Math.abs((c.y - b.y)*a.x - (c.x - b.x)*a.y + c.x*b.y - c.y*b.x) / Math.sqrt(Math.pow((c.y-b.y),2) + Math.pow((c.x-b.x),2));
  		if (distance > tolerance){ return false; }

    		//test if the point c is between a and b
    		var dotproduct = (c.x - a.x) * (b.x - a.x) + (c.y - a.y)*(b.y - a.y)
    		if(dotproduct < 0){ return false; }

    		var squaredlengthba = (b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y);
    		if(dotproduct > squaredlengthba){ return false; }

    		return true

		return false;
	}

	this.hover = function(){ this.hover = true; }

	this.unhover = function(){ this.hover = false; }
	
	this.select = function(){
		this.vertex1.select();
		this.vertex2.select();
	}

	this.deselect = function(){
		this.vertex1.deselect();
		this.vertex2.deselect();
	}

	this.getVertexes = function(){
		var vertexes = new Array();
		if (this.vertex1Set) {vertexes.push(this.vertex1);}
		if (this.vertex2Set) {vertexes.push(this.vertex2);}
		return vertexes;
	}

	this.v1 = function() { return this.vertex1; }
	this.v2 = function() { return this.vertex2; }

	this.start = function(x,y){
		if (nearestVertex(5,x,y)) {
			this.vertex1 = nearestVertex(5,x,y);
		} else {
			this.vertex1 = new Vertex(x,y);
			pushVertex(this.vertex1);
		}

		this.vertex2 = new Vertex(x,y);

		this.vertex1.addParent(this);
		this.vertex1Set = true;
		this.vertex1.select();
	}

	this.end = function(x,y){
		this.v = nearestVertex(5,x,y); //this number is the "hover range" defined in selector - should be global?
		if (this.v) {
			this.vertex2 = this.v;
			this.vertex2Set = true;
		}
		var compX = Math.round(x/gridSize)*gridSize;
		if (!snap) { compX = x; }
		var compY = Math.round(y/gridSize)*gridSize;
		if (!snap) { compY = y; }

		if(!(this.vertex1.x == compX && this.vertex1.y == compY) && !this.vertex2Set){
			this.vertex2 = new Vertex(x,y);
			pushVertex(this.vertex2);
		}

		this.vertex2.addParent(this);
		this.vertex2Set = true;
		this.vertex1.deselect();
		this.vertex2.deselect();
		this.finished = true;
	}

	this.step = function(x,y){ //lines end after 1 step
		this.end(x,y);
	}
}